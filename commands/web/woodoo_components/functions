#!/bin/bash
#ddev-generated - Do not modify this file; your modifications will be overwritten.

# Generates the Hyvä theme configuration
function hyvaConfigGenerate() {
    echo -e "\n${txtcyn}${ICON_ARROW_RIGHT} Generate Hyvä Configuration ... ${txtrst}"
    "${DDEV_COMPOSER_ROOT}"/bin/magento hyva:config:generate
}

# Clears the Magento cache
function clearCache() {
    "${DDEV_COMPOSER_ROOT}"/bin/magento cache:flush
    echo -e "\n${txtgrn}Cache cleared${txtrst}"
}

# Clears the static files generated by Magento
function clearStaticFiles() {
    rm -rf "${DDEV_COMPOSER_ROOT}"/pub/static/* "${DDEV_COMPOSER_ROOT}"/var/view_preprocessed/*
    echo -e "${txtgrn}Magento Static files cleared${txtrst}"
}

# Runs the necessary Grunt tasks from project root to build the theme
# DDEV_COMPOSER_ROOT is the path to the project root directory
function runGruntTasks() {
    "${DDEV_COMPOSER_ROOT}"/node_modules/.bin/grunt clean
    "${DDEV_COMPOSER_ROOT}"/node_modules/.bin/grunt less
}

# Builds the Hyvä theme specified by the first argument and the theme code by the second argument
# HYVA_PATH is the path to the Hyvä theme directory
# TEMP_THEME_NAME is the theme name (code) of the theme

function getInstalledHyvaVersion() {
    HYVA_VERSION=""
    local TEMP_THEME_NAME=$2

    # Check if a composer.json exists in the theme directory
    # If not, use the composer.json from the Magento root directory to get the Hyvä version
    if [[ ! -f "${DDEV_COMPOSER_ROOT}/$1/composer.json" ]]; then
        echo -e "${txtylw}${ICON_WARNING} Could not find composer.json in Theme ($1)"
        echo -e "${txtcyn}${ICON_ARROW_RIGHT} Use composer.json from Magento-Root instead${txtrst}"
        cd "${DDEV_COMPOSER_ROOT}" || exit
        HYVA_VERSION=$(grep -oP '(?<="hyva-themes/magento2-default-theme": ").*' composer.json | cut -d ' ' -f 1 | sed 's/"//g')
    else
        cd "${DDEV_COMPOSER_ROOT}/$1" || exit
        HYVA_VERSION=$(grep -oP '(?<="hyva-themes/magento2-default-theme": ").*' composer.json | cut -d ' ' -f 1 | sed 's/"//g')
    fi

    HYVA_VERSION=$(echo "${HYVA_VERSION}" | sed 's/,//g')
    echo -e "${txtgrn}${ICON_ARROW_RIGHT} ${txtpur}${TEMP_THEME_NAME}${txtcyn} is a Hyvä ${txtpur}${HYVA_VERSION}${txtcyn} Theme${txtrst}\n"
    cd - >/dev/null || exit
}

# check if node_modules needs to be updated
function checkNpmOutdatedPackages() {
    if [[ -d "$1/web/tailwind/node_modules" ]]; then
        cd "$1/web/tailwind" || exit
        echo -e "${txtcyn}${ICON_ARROW_RIGHT} Check for outdated dependencies ... ${txtrst}\n"
        npm outdated --silent || npm ci
        echo -e "${txtcyn}${ICON_SUCCESS} Dependencies check done.${txtrst}"
        cd - >/dev/null || exit
    fi
}

# check if all dependencies are up to date in node_modules folder
function checkNodeModules() {
    if [[ ! -d "$1/web/tailwind/node_modules" ]]; then
        echo -e "\n${txtylw}${ICON_WARNING} Install missing npm dependencies (node_modules) ... ${txtrst}"
        cd "$1/web/tailwind" || exit
        npm ci
        if [[ -d "./node_modules" ]]; then
            echo -e "\n${txtcyn}${ICON_SUCCESS} npm dependencies installed.${txtrst}"
            cd - >/dev/null || exit
        else
            echo -e "${txtred}${ICON_ERROR} Could not install npm dependencies. Please check $1/web/tailwind/node_modules ${txtrst}"
            cd - >/dev/null || exit
        fi
    else
        echo -e "${txtcyn}${ICON_SUCCESS} node_modules folder found.${txtrst}"
    fi
}

function installGrunt() {
    npm install
    sudo npm install grunt -g
    sudo npm install grunt-cli -g
}
