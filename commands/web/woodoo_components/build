#!/bin/bash
#ddev-generated - Do not modify this file; your modifications will be overwritten.

# Build Magento theme and install required dependencies
function buildMagentoDefault() {
    THEME_NAME=$1
    echo -e "${txtcyn}Start building ${txtpur}${THEME_NAME}${txtcyn} Theme ... please wait!\n${txtrst}"

    # Install Node dependencies if missing
    if [[ ! -d "${DDEV_COMPOSER_ROOT}/node_modules/" ]]; then
        echo -e "${txtylw}${ICON_ERROR} Install missing Node Dependencies${txtrst}"
        cd "${DDEV_COMPOSER_ROOT}" || exit
        npm ci
    fi

    # Install Grunt if missing
    if "${DDEV_COMPOSER_ROOT}/node_modules/.bin/grunt" --version &>/dev/null; then
        echo -e "${txtcyn}${ICON_SUCCESS} Grunt is installed${txtrst}"
    else
        echo -e "\n\n${txtcyn}${ICON_ERROR} Install missing Grunt${txtrst}\n\n"
        npx install grunt # install grunt locally in ddev container for the project

        if ! command -v grunt &>/dev/null; then
            sudo npm install grunt -g
        fi

        if ! command -v grunt &>/dev/null; then
            echo -e "${txtred}${ICON_ERROR} Could not install grunt global. Please install grunt manually ${txtcyn}sudo npm install grunt -g ${txtrst}."
        else
            echo -e "${txtcyn}${ICON_SUCCESS} Grunt installed successfully.${txtrst}"
        fi
    fi

    runGruntTasks

    # Handle Grunt task results
    # If failed: Attempt repair by reinstalling dependencies
    if [[ $? -eq 0 ]]; then
        echo -e "${txtgrn}${ICON_SUCCESS} Grunt tasks finished${txtrst}\n\n"
        echo -e "\n${txtgrn}${ICON_SUCCESS}${bldcyn} Theme Build for ${txtpur}${THEME_NAME}${txtcyn} finished${txtrst}\n\n\n"
    else
        echo -e "\n\n${txtred}${ICON_ERROR} Grunt task failed. Try to repair it for you.${txtrst}\n\n"
        rm -rf "${DDEV_COMPOSER_ROOT}"/node_modules
        npm ci

        runGruntTasks

        # check again if grunt tasks finished successfully
        if [[ $? -eq 0 ]]; then
            echo -e "${txtgrn}${ICON_SUCCESS} Grunt tasks successfull!${txtrst}\n\n"
            echo -e "\n${txtgrn}${ICON_SUCCESS}${bldcyn} Theme Build for ${txtpur}${THEME_NAME}${txtcyn} finished${txtrst}\n\n\n"
        else
            echo -e "\n\n${bakred}\n\n  ${ICON_ERROR} Grunt task failed again. Could not repair.\n${txtrst}\n\n"
            echo -e "${txtgrn}${txtcyn} Please fix errors above and try again.${txtrst}"
            echo -e "\n${txtgrn}${ICON_ERROR}${bldcyn} Theme Build for ${txtpur}${THEME_NAME}${txtcyn} failed.${txtrst}\n\n"
        fi
    fi
}

# Build Hyva theme with appropriate version handling
function buildHyva() {
    local HYVA_PATH=$1
    local HYVA_NAME=$2
    local HYVA_VERSION=""

    getInstalledHyvaVersion "${HYVA_PATH}" "${HYVA_NAME}"
    checkNodeModules "${HYVA_PATH}"
    checkNpmOutdatedPackages "${HYVA_PATH}"

    cd "${HYVA_PATH}"/web/tailwind || exit

    # check if Hyvä version is greater than 1.2.0 to run the correct build command
    if [[ $(echo "${HYVA_VERSION}" | awk -F. '{print $1"."$2"."$3}') > 1.2.0 ]]; then
        npm run build
    else
        npm run build-prod
    fi

    cd - >/dev/null || exit

    hyvaConfigGenerate
    echo -e "\n${txtgrn}${ICON_SUCCESS}${bldcyn} Hyvä Theme ${txtpur}(v${HYVA_VERSION})${txtcyn} build for ${txtpur}${HYVA_NAME}${txtcyn} done!${txtrst}\n\n\n"
}

# Build specified themes or all themes listed in config-themes.yaml
if [[ ($1 == "build" || $1 == "b") && ($2 == "" || $2 == "-f") ]]; then

    # Get list of available themes from config-themes.yaml and validate their existence
    checkThemePathExists silent

    if [[ $(countThemesinConfig) -lt 1 ]]; then
        echo -e "${txtred}No Theme is available to build${txtrst}\n"
        echo -e "${txtgrn}Please add a Theme to ${txtcyn}${PROJECT_CONFIG_FILE}${txtrst}${txtrst}\n"
        addThemesToConfig
    elif [[ $(countThemesinConfig) == 1 ]]; then
        echo -e "${txtgrn}$(countThemesinConfig) Theme is ready to build:${txtrst}\n"
    else
        echo -e "${txtgrn}$(countThemesinConfig) Themes are ready to build:${txtrst}\n"
    fi

    # If more than one theme is available, prompt for theme selection unless force flag (-f) is used
    if [[ $(countThemesinConfig) -gt 1 && $2 != '-f' ]]; then
        THEMES_TO_BUILD=$(gum choose --cursor-prefix "[ ] " --unselected-prefix "[ ] " --selected-prefix "[✓] " --no-limit $THEMES_IN_CONFIG)
    else
        THEMES_TO_BUILD=${THEMES_IN_CONFIG}
    fi

    # Build selected themes from config-themes.yaml (all themes if -f flag is used)
    for THEME_CODE in ${THEMES_TO_BUILD}; do
        THEME_TO_BUILD=$(echo $(grep -oP '(?<='$THEME_CODE': ).*' $PROJECT_CONFIG_FILE) | cut -d ' ' -f 1 | sed 's/"//g')

        # Check if the theme is a Hyvä theme
        checkHyva "${THEME_TO_BUILD}"

        # Determine if it's a Hyvä theme and build accordingly, otherwise build as default Magento theme
        if [[ ${HYVA} == true ]]; then
            buildHyva "${THEME_TO_BUILD}" "${THEME_CODE}"
        else
            buildMagentoDefault "${THEME_CODE}"
        fi

    done

    # Clear Magento Cache and Static Files
    clearStaticFiles
    clearCache

fi

# Build a specific theme when provided as an argument
if [[ ($1 == "build" || $1 == "b") && $2 != "" && $2 != "-f" ]]; then

    # Retrieve all themes defined in config-themes.yaml
    checkThemePathExists

    # Validate if the provided theme code ($2) exists in the configuration
    if [[ ! " ${THEMES_IN_CONFIG[*]} " =~ ${2} ]]; then
        echo -e "\n${txtred}${ICON_ERROR} ERROR! ${undred}${2}${txtred} is not listed in ${undred}${PROJECT_CONFIG_FILE}${txtred}. Please check again or choose one of these:${txtrst}"
        echo -e "${txtcyn}\nAvailable Themes:${txtrst}"
        getThemesInConfig
        echo -e "\n"
        exit 0
    else
        THEME_TO_BUILD=$(grep -oP "(?<=${2}: ).*" "${PROJECT_CONFIG_FILE}" | cut -d ' ' -f 1 | tr -d '"')
        checkHyva "${THEME_TO_BUILD}"

        # Determine if it's a Hyvä theme and build accordingly, otherwise build as default Magento theme
        if [[ ${HYVA} == true ]]; then
            buildHyva "${THEME_TO_BUILD}" "$2"
        else
            buildMagentoDefault "$2"
        fi

        # Clear Magento Cache and Static Files
        clearCache
        clearStaticFiles

    fi
fi
